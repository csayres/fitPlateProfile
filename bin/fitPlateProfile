#!/usr/bin/env python
import os
import sys
import argparse
import glob

from fitPlateProfile import DuPontMeasurement, doNewInterp, plt, \
     MMPerInch, addProfilometry, MitutoyoConnection


def parseRadialMeas(rawInputLine):
    try:
        rawInputLine = rawInputLine.strip()
        measStrs = rawInputLine.split()
        assert len(measStrs)==5
        measStrs = ["."+strMeas for strMeas in measStrs]
        # convert to floats
        radialFloats = [float(meas) for meas in measStrs]
    except:
        raise RuntimeError("Could not parse: %s"%rawInputLine)
    return radialFloats


def profile(args):
    if not args.plateID:
        plateID = int(raw_input("plateID: "))
    else:
        plateID = int(args.plateID)
    print("Press 'r' key to automatically record gauge values")
    print("---OR---")
    print("Enter radial meaurements space separated with no decimal point.")
    print("Record from plate center to plate edge.")
    print("Begin with Measurement Postion 1 ==> probes towards tab.")
    print("Continue measuring counter clockwise from the tab in increments of 45 degrees.")
    duPontMeasurementList = []
    measurementDirections = DuPontMeasurement.dirThetaMap.keys() # measurement positions
    mitutoyoConnection = MitutoyoConnection()
    for measDir in measurementDirections:
        while True:
            try:
                userInput = raw_input("Measurement position %i: "%measDir)
                userInput = userInput.strip().lower()
                if userInput == "r":
                    # query for values
                    radialFloats = mitutoyoConnection.queryGauges()
                else:
                    radialFloats = parseRadialMeas(userInput)
                # convert the radial floats to mm
                radialFloats = [x*MMPerInch for x in radialFloats]
                duPontMeasurementList.append(DuPontMeasurement(measDir, radialFloats))
            except RuntimeError as e:
                print(e)
            else:
                break

    doNewInterp(duPontMeasurementList, plateID)
    plt.show(block=False)
    while True:
        user_input = raw_input("Accept Profile (add to platedb)? [(y)es,(n)o]").strip().lower()
        if user_input in ["yes", "y"]:
            print("Saving profile data to platedb")
            break
        elif user_input in ["no", "n"]:
            print("NOT saving profile to platedb, exiting...")
            sys.exit()
        else:
            print("bad user input. try again.")
    mjd, fscanID = addProfilometry(plateID, duPontMeasurementList)
    # save image in /data
    print("saving profile image for mjd: %i fscanId: %i plateId: %i"%(mjd, fscanID, plateID))
    basePath = "/data/mapper/%s"%mjd
    baseFile = "profile-%i-%i-%s"%(plateID, mjd, ("%i"%fscanID).zfill(2))
    # any files exist?
    existingFiles = glob.glob(os.path.join(basePath, baseFile+"*.png"))
    nFiles = len(existingFiles)
    profNum = nFiles + 1
    filename = os.path.join(basePath, baseFile+"-%s.png"%(("%i"%profNum).zfill(2)))
    plt.savefig(filename)




def main(argv=None):
    parser = argparse.ArgumentParser(
        prog=os.path.basename(sys.argv[0]),
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
        description="Profile a plate."
        )
    parser.add_argument("--plateID", type=int, required=False, help="Cart ID")
    args = parser.parse_args()
    profile(args)

if __name__ == '__main__':
    main()

